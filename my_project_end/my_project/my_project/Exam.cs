//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace my_project
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
    using System.Data.Entity;

    public partial class Exam
    {
        public Exam()
        {
            this.StudentMarks = new HashSet<StudentMark>();
        }
        Database1Entities context;
        public int Id { get; set; }
        public int SubjectId { get; set; }
        public System.DateTime Date { get; set; }
        public int Term { get; set; }

        public virtual Subject Subject { get; set; }
        public virtual ICollection<StudentMark> StudentMarks { get; set; }
        public void AddData()
        {
            Console.WriteLine("Enter the Term Of Exam");
            Term = int.Parse(Console.ReadLine());
            Console.WriteLine("Please enter the registration date (format: MM/dd/yyyy):");
            string dateStr = Console.ReadLine();
            Date = DateTime.Parse(dateStr);
            Console.WriteLine("Enter the SubjectId");
            SubjectId = int.Parse(Console.ReadLine());
        }
        public void InsertExam()
        {
            context = new Database1Entities();

            try
            {
                AddData();
                var exam = new Exam
                {
                    Date = Date,
                    Term = Term,
                    SubjectId = SubjectId
                };
                context.Exams.Add(exam);
                context.SaveChanges();

                Console.WriteLine("The record has been added successfully.");
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message.ToString());
            }
        }
        public void DeleteExam()
        {
             context = new Database1Entities();
                try
                {
                    Console.WriteLine("Please enter the Exam number you want to delete:");
                    int examId = Convert.ToInt32(Console.ReadLine());

                    var exam = context.Exams.FirstOrDefault(e => e.Id == examId);
                    if (exam == null)
                    {
                        Console.WriteLine("No records were found matching the specified criteria.");
                    }
                    else
                    {
                        context.Exams.Remove(exam);
                        context.SaveChanges();
                        Console.WriteLine("The record has been deleted successfully.");
                    }
                   }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message.ToString());
                }
            }
        public void FullDeleteExam()
        {
            context = new Database1Entities();
            
                try
                {
                    var exams = context.Exams.ToList();
                    if (exams.Count == 0)
                    {
                        Console.WriteLine("No records were found matching the specified criteria.");
                    }
                    else
                    {
                        context.Exams.RemoveRange(exams);
                        context.Database.ExecuteSqlCommand("DELETE FROM Exams");
                        context.Database.ExecuteSqlCommand("DBCC CHECKIDENT ('Exams', RESEED, 0)");
                        Console.WriteLine("All records have been deleted successfully.");
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message.ToString());
                }
            }
        public void FullUpdateExam()
        {
             context = new Database1Entities();
            
                try
                {
                    Console.WriteLine("Please enter the Exam number you want to modify:");
                    int examId = Convert.ToInt32(Console.ReadLine());

                    var exam = context.Exams.SingleOrDefault(e => e.Id == examId);
                    if (exam == null)
                    {
                        Console.WriteLine("No records were found matching the specified criteria.");
                    }
                    else
                    {
                        AddData();
                        exam.Term = Term;
                        exam.Date = Date;
                        exam.SubjectId = SubjectId;
                        context.SaveChanges();
                        Console.WriteLine("The record has been updated successfully.");
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message.ToString());
                }
            
        }
        public void UpdateExam()
        {
            context = new Database1Entities();
            
                try
                {
                    Console.WriteLine("Please enter the Exam number you want to modify:");
                    int examId = Convert.ToInt32(Console.ReadLine());

                    var exam = context.Exams.SingleOrDefault(e => e.Id == examId);
                    if (exam == null)
                    {
                        Console.WriteLine("No records were found matching the specified criteria.");
                    }
                    else
                    {
                        Console.WriteLine("What do you want to modify?");
                        Console.WriteLine("1. Term");
                        Console.WriteLine("2. Date ");
                        Console.WriteLine("3. SubjectId");
                        Console.WriteLine("0. To Close");
                        int choice = Convert.ToInt32(Console.ReadLine());

                        switch (choice)
                        {
                            case 1:
                                Console.WriteLine("Please enter the new Term:");
                                exam.Term = int.Parse(Console.ReadLine());
                                break;
                            case 2:
                                Console.WriteLine("Please enter the new Date:");
                                exam.Date = DateTime.Parse(Console.ReadLine());
                                break;
                            case 3:
                                Console.WriteLine("Please enter the new SubjectId:");
                                exam.SubjectId = Convert.ToInt32(Console.ReadLine());
                                break;
                            default:
                                return;
                        }
                        context.SaveChanges();
                        Console.WriteLine("The data has been updated successfully.");
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message.ToString());
                }
            
        }
        public void ShowDataExam()
{
    context = new Database1Entities();
    
        try
        {
            var exams = context.Exams.ToList();
            if (exams.Count == 0)
            {
                Console.WriteLine("No matching record found.");
            }
            else
            {
                foreach (var exam in exams)
                {
                    Console.WriteLine("ID: {0} , Term: {1} , Date: {2} , SubjectId: {3}", exam.Id, exam.Term, exam.Date.ToString("yyyy-MM-dd"),exam.SubjectId);
                    Console.WriteLine("=====================================================================================");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred: {0}",ex.Message.ToString());
        }
    
}
        public void ShowDataExamWithId()
{
         context = new Database1Entities();
    
        try
        {
            Console.WriteLine("Please enter the Exam number you want to view");
            int ExamId = Convert.ToInt32(Console.ReadLine());
            var exam = context.Exams.FirstOrDefault(e => e.Id == ExamId);

            if (exam == null)
            {
                Console.WriteLine("No matching record found.");
            }
            else
            {
                Console.WriteLine("ID: {0} , Term: {1} , Date: {2} , SubjectId: {3}", exam.Id, exam.Term, exam.Date.ToString("yyyy-MM-dd"), exam.SubjectId);
                Console.WriteLine("=====================================================================================");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred: {0}",ex.Message.ToString());
        }
    
}
        public void start_exam()
        {
            int choice;
            do
            {
                Console.WriteLine("What do you want to do in the students table");
                Console.WriteLine("1. InsertExam\n==============================");
                Console.WriteLine("2. DeleteExam\n==============================");
                Console.WriteLine("2. FullDeleteExam\n==============================");
                Console.WriteLine("4. FullUpdateExam\n==============================");
                Console.WriteLine("5. UpdateExam\n==============================");
                Console.WriteLine("6. ShowDataExam\n==============================");
                Console.WriteLine("7. ShowDataExamWithId\n==============================");
                Console.WriteLine("0. To Close");
                choice = Convert.ToInt32(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        InsertExam();
                        break;
                    case 2:
                        DeleteExam();
                        break;
                    case 3:
                        FullDeleteExam();
                        break;
                    case 4:
                        FullUpdateExam();
                        break;
                    case 5:
                        UpdateExam();
                        break;
                    case 6:
                        ShowDataExam();
                        break;
                    case 7:
                        ShowDataExamWithId();
                        break;
                }
            } while (choice != 0);
        }
    }
    }



